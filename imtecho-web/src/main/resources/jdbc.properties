#datasource configuration
spring.datasource.platform=postgres
spring.database.driverClassName=org.postgresql.Driver
spring.datasource.url=jdbc:postgresql://@jdbc.url@:@jdbc.port@/@jdbc.database@
spring.datasource.username=@jdbc.username@
spring.datasource.password=@jdbc.password@
#spring.datasource.max-active = @jdbc.maxActiveConnection@
spring.datasource.max-wait=30000
spring.datasource.hikari.maximum-pool-size=@jdbc.maxPoolSize@
spring.datasource.hikari.connectionTimeout=30000
spring.datasource.hikari.validate-on-borrow=false
#kp
spring.datasource.testWhileIdle = true
spring.datasource.validationQuery = SELECT 1
#jpa configuration
#spring.jpa.database=POSTGRESQL
#spring.jpa.show-sql=true
#spring.jpa.hibernate.ddl-auto=update

#================================================================================
#                JPA/Hibernate
#================================================================================
spring.jpa.properties.hibernate.current_session_context_class=org.springframework.orm.hibernate4.SpringSessionContext

#flyway configuration
spring.flyway.locations = classpath:db/migration2
#flyway.schemas=public
# schemas to update
spring.flyway.init-version=1
spring.flyway.baseline-on-migrate=true
# version to start migration
#flyway.init-sqls= # SQL statements to execute to initialize a connection immediately after obtaining it
spring.flyway.sql-migration-prefix=V
spring.flyway.sql-migration-suffix=.sql
spring.flyway.validate-on-migrate=false
spring.flyway.enabled=false
flyway.url=jdbc:postgresql://@jdbc.url@:@jdbc.port@/@jdbc.database@
# JDBC url if you want Flyway to create its own DataSource
spring.flyway.user=@jdbc.username@
# JDBC username if you want Flyway to create its own DataSource
spring.flyway.password=@jdbc.password@
# JDBC password if you want Flyway to create its own DataSource
spring.flyway.out-of-order=true

